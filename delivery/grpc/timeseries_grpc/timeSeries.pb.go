// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Delivery/grpc/timeseries_grpc/timeSeries.proto

/*
Package timeseries_grpc is a generated protocol buffer package.

It is generated from these files:
	Delivery/grpc/timeseries_grpc/timeSeries.proto

It has these top-level messages:
	Timeseries
	Error
*/
package timeseries_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Timeseries struct {
	Id         string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	MeterId    string             `protobuf:"bytes,2,opt,name=meterId" json:"meterId,omitempty"`
	CustomerId string             `protobuf:"bytes,3,opt,name=customerId" json:"customerId,omitempty"`
	Resolution string             `protobuf:"bytes,4,opt,name=resolution" json:"resolution,omitempty"`
	From       string             `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"`
	To         string             `protobuf:"bytes,6,opt,name=to" json:"to,omitempty"`
	Values     map[string]float64 `protobuf:"bytes,7,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *Timeseries) Reset()                    { *m = Timeseries{} }
func (m *Timeseries) String() string            { return proto.CompactTextString(m) }
func (*Timeseries) ProtoMessage()               {}
func (*Timeseries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Timeseries) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Timeseries) GetMeterId() string {
	if m != nil {
		return m.MeterId
	}
	return ""
}

func (m *Timeseries) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *Timeseries) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *Timeseries) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Timeseries) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Timeseries) GetValues() map[string]float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Timeseries)(nil), "timeseries_grpc.Timeseries")
	proto.RegisterType((*Error)(nil), "timeseries_grpc.Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TimeseriesHandler service

type TimeseriesHandlerClient interface {
	Store(ctx context.Context, in *Timeseries, opts ...grpc.CallOption) (*Timeseries, error)
}

type timeseriesHandlerClient struct {
	cc *grpc.ClientConn
}

func NewTimeseriesHandlerClient(cc *grpc.ClientConn) TimeseriesHandlerClient {
	return &timeseriesHandlerClient{cc}
}

func (c *timeseriesHandlerClient) Store(ctx context.Context, in *Timeseries, opts ...grpc.CallOption) (*Timeseries, error) {
	out := new(Timeseries)
	err := grpc.Invoke(ctx, "/timeseries_grpc.timeseriesHandler/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TimeseriesHandler service

type TimeseriesHandlerServer interface {
	Store(context.Context, *Timeseries) (*Timeseries, error)
}

func RegisterTimeseriesHandlerServer(s *grpc.Server, srv TimeseriesHandlerServer) {
	s.RegisterService(&_TimeseriesHandler_serviceDesc, srv)
}

func _TimeseriesHandler_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timeseries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesHandlerServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeseries_grpc.timeseriesHandler/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesHandlerServer).Store(ctx, req.(*Timeseries))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeseriesHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timeseries_grpc.timeseriesHandler",
	HandlerType: (*TimeseriesHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _TimeseriesHandler_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Delivery/grpc/timeseries_grpc/timeSeries.proto",
}

func init() { proto.RegisterFile("Delivery/grpc/timeseries_grpc/timeSeries.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x4d, 0xd2, 0xa4, 0x38, 0x05, 0xff, 0x0c, 0x1e, 0x96, 0x0a, 0x52, 0x73, 0xb1, 0xa7,
	0x14, 0xea, 0x45, 0xbd, 0x78, 0xd0, 0x82, 0x5e, 0x53, 0x11, 0x6f, 0x12, 0x9b, 0xb1, 0x2c, 0x26,
	0xd9, 0x32, 0xbb, 0x29, 0xe4, 0x8b, 0xf8, 0x79, 0x4b, 0x36, 0x69, 0x53, 0x7a, 0xe8, 0x6d, 0xde,
	0xfb, 0xcd, 0x30, 0x6f, 0x76, 0x21, 0x7a, 0xa5, 0x4c, 0xae, 0x89, 0xab, 0xc9, 0x92, 0x57, 0x8b,
	0x89, 0x91, 0x39, 0x69, 0x62, 0x49, 0xfa, 0x7b, 0xa7, 0xe7, 0x56, 0x47, 0x2b, 0x56, 0x46, 0xe1,
	0xf9, 0x41, 0x47, 0xf8, 0xef, 0x02, 0x7c, 0xec, 0x3c, 0x3c, 0x03, 0x57, 0xa6, 0xc2, 0x19, 0x39,
	0xe3, 0xd3, 0xd8, 0x95, 0x29, 0x0a, 0xe8, 0xe7, 0x64, 0x88, 0xdf, 0x53, 0xe1, 0x5a, 0x73, 0x2b,
	0xf1, 0x06, 0x60, 0x51, 0x6a, 0xa3, 0x72, 0x0b, 0x3d, 0x0b, 0xf7, 0x9c, 0x9a, 0x33, 0x69, 0x95,
	0x95, 0x46, 0xaa, 0x42, 0xf4, 0x1a, 0xde, 0x39, 0x88, 0xd0, 0xfb, 0x65, 0x95, 0x0b, 0xdf, 0x12,
	0x5b, 0xd7, 0xdb, 0x8d, 0x12, 0x41, 0xb3, 0xdd, 0x28, 0x7c, 0x86, 0x60, 0x9d, 0x64, 0x25, 0x69,
	0xd1, 0x1f, 0x79, 0xe3, 0xc1, 0xf4, 0x2e, 0x3a, 0x88, 0x1f, 0x75, 0xd1, 0xa3, 0x4f, 0xdb, 0x39,
	0x2b, 0x0c, 0x57, 0x71, 0x3b, 0x36, 0x7c, 0x84, 0xc1, 0x9e, 0x8d, 0x17, 0xe0, 0xfd, 0x51, 0xd5,
	0x9e, 0x57, 0x97, 0x78, 0x05, 0xbe, 0x6d, 0xb5, 0xd7, 0x39, 0x71, 0x23, 0x9e, 0xdc, 0x07, 0x27,
	0xbc, 0x05, 0x7f, 0xc6, 0xac, 0xb8, 0x79, 0x02, 0xad, 0x93, 0x25, 0xb5, 0x83, 0x5b, 0x39, 0xfd,
	0x82, 0xcb, 0x2e, 0xcf, 0x5b, 0x52, 0xa4, 0x19, 0x31, 0xbe, 0x80, 0x3f, 0x37, 0x8a, 0x09, 0xaf,
	0x8f, 0x84, 0x1d, 0x1e, 0x83, 0xe1, 0xc9, 0x4f, 0x60, 0x7f, 0xeb, 0x7e, 0x13, 0x00, 0x00, 0xff,
	0xff, 0xfc, 0xde, 0xea, 0x02, 0xdf, 0x01, 0x00, 0x00,
}
