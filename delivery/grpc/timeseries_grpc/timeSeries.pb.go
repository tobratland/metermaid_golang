// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Delivery/grpc/timeseries_grpc/timeSeries.proto

/*
Package timeseries_grpc is a generated protocol buffer package.

It is generated from these files:
	Delivery/grpc/timeseries_grpc/timeSeries.proto

It has these top-level messages:
	Value
	Timeseries
	GetRequest
	GetAllFromTimeToTimeResponse
	SumResponse
	Error
*/
package timeseries_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Value struct {
	Hour  *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=hour" json:"hour,omitempty"`
	Value float64                    `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Value) GetHour() *google_protobuf.Timestamp {
	if m != nil {
		return m.Hour
	}
	return nil
}

func (m *Value) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Timeseries struct {
	Id         string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	MeterId    string                     `protobuf:"bytes,2,opt,name=meterId" json:"meterId,omitempty"`
	CustomerId string                     `protobuf:"bytes,3,opt,name=customerId" json:"customerId,omitempty"`
	Resolution string                     `protobuf:"bytes,4,opt,name=resolution" json:"resolution,omitempty"`
	From       *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"`
	To         *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=to" json:"to,omitempty"`
	Values     []*Value                   `protobuf:"bytes,7,rep,name=values" json:"values,omitempty"`
}

func (m *Timeseries) Reset()                    { *m = Timeseries{} }
func (m *Timeseries) String() string            { return proto.CompactTextString(m) }
func (*Timeseries) ProtoMessage()               {}
func (*Timeseries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Timeseries) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Timeseries) GetMeterId() string {
	if m != nil {
		return m.MeterId
	}
	return ""
}

func (m *Timeseries) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *Timeseries) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *Timeseries) GetFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Timeseries) GetTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Timeseries) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type GetRequest struct {
	From       *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To         *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	CustomerId string                     `protobuf:"bytes,3,opt,name=customerId" json:"customerId,omitempty"`
	MeterId    string                     `protobuf:"bytes,4,opt,name=meterId" json:"meterId,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *GetRequest) GetTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *GetRequest) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *GetRequest) GetMeterId() string {
	if m != nil {
		return m.MeterId
	}
	return ""
}

type GetAllFromTimeToTimeResponse struct {
	TimeseriesList []*Timeseries `protobuf:"bytes,1,rep,name=TimeseriesList" json:"TimeseriesList,omitempty"`
}

func (m *GetAllFromTimeToTimeResponse) Reset()                    { *m = GetAllFromTimeToTimeResponse{} }
func (m *GetAllFromTimeToTimeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllFromTimeToTimeResponse) ProtoMessage()               {}
func (*GetAllFromTimeToTimeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetAllFromTimeToTimeResponse) GetTimeseriesList() []*Timeseries {
	if m != nil {
		return m.TimeseriesList
	}
	return nil
}

type SumResponse struct {
	Sum        float64                    `protobuf:"fixed64,1,opt,name=sum" json:"sum,omitempty"`
	CustomerId string                     `protobuf:"bytes,2,opt,name=customerId" json:"customerId,omitempty"`
	MeterId    string                     `protobuf:"bytes,3,opt,name=meterId" json:"meterId,omitempty"`
	From       *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"`
	To         *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=to" json:"to,omitempty"`
}

func (m *SumResponse) Reset()                    { *m = SumResponse{} }
func (m *SumResponse) String() string            { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()               {}
func (*SumResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SumResponse) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SumResponse) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *SumResponse) GetMeterId() string {
	if m != nil {
		return m.MeterId
	}
	return ""
}

func (m *SumResponse) GetFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SumResponse) GetTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Value)(nil), "timeseries_grpc.Value")
	proto.RegisterType((*Timeseries)(nil), "timeseries_grpc.Timeseries")
	proto.RegisterType((*GetRequest)(nil), "timeseries_grpc.GetRequest")
	proto.RegisterType((*GetAllFromTimeToTimeResponse)(nil), "timeseries_grpc.GetAllFromTimeToTimeResponse")
	proto.RegisterType((*SumResponse)(nil), "timeseries_grpc.SumResponse")
	proto.RegisterType((*Error)(nil), "timeseries_grpc.Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TimeseriesHandler service

type TimeseriesHandlerClient interface {
	Store(ctx context.Context, in *Timeseries, opts ...grpc.CallOption) (*Timeseries, error)
	GetAllFromTimeToTime(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAllFromTimeToTimeResponse, error)
	GetTotalUsageForCustomerInTimePeriod(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*SumResponse, error)
	GetTotalUsageForMeterInTimePeriod(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*SumResponse, error)
}

type timeseriesHandlerClient struct {
	cc *grpc.ClientConn
}

func NewTimeseriesHandlerClient(cc *grpc.ClientConn) TimeseriesHandlerClient {
	return &timeseriesHandlerClient{cc}
}

func (c *timeseriesHandlerClient) Store(ctx context.Context, in *Timeseries, opts ...grpc.CallOption) (*Timeseries, error) {
	out := new(Timeseries)
	err := grpc.Invoke(ctx, "/timeseries_grpc.timeseriesHandler/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeseriesHandlerClient) GetAllFromTimeToTime(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAllFromTimeToTimeResponse, error) {
	out := new(GetAllFromTimeToTimeResponse)
	err := grpc.Invoke(ctx, "/timeseries_grpc.timeseriesHandler/GetAllFromTimeToTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeseriesHandlerClient) GetTotalUsageForCustomerInTimePeriod(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := grpc.Invoke(ctx, "/timeseries_grpc.timeseriesHandler/GetTotalUsageForCustomerInTimePeriod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeseriesHandlerClient) GetTotalUsageForMeterInTimePeriod(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := grpc.Invoke(ctx, "/timeseries_grpc.timeseriesHandler/GetTotalUsageForMeterInTimePeriod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TimeseriesHandler service

type TimeseriesHandlerServer interface {
	Store(context.Context, *Timeseries) (*Timeseries, error)
	GetAllFromTimeToTime(context.Context, *GetRequest) (*GetAllFromTimeToTimeResponse, error)
	GetTotalUsageForCustomerInTimePeriod(context.Context, *GetRequest) (*SumResponse, error)
	GetTotalUsageForMeterInTimePeriod(context.Context, *GetRequest) (*SumResponse, error)
}

func RegisterTimeseriesHandlerServer(s *grpc.Server, srv TimeseriesHandlerServer) {
	s.RegisterService(&_TimeseriesHandler_serviceDesc, srv)
}

func _TimeseriesHandler_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timeseries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesHandlerServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeseries_grpc.timeseriesHandler/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesHandlerServer).Store(ctx, req.(*Timeseries))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeseriesHandler_GetAllFromTimeToTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesHandlerServer).GetAllFromTimeToTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeseries_grpc.timeseriesHandler/GetAllFromTimeToTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesHandlerServer).GetAllFromTimeToTime(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeseriesHandler_GetTotalUsageForCustomerInTimePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesHandlerServer).GetTotalUsageForCustomerInTimePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeseries_grpc.timeseriesHandler/GetTotalUsageForCustomerInTimePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesHandlerServer).GetTotalUsageForCustomerInTimePeriod(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeseriesHandler_GetTotalUsageForMeterInTimePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesHandlerServer).GetTotalUsageForMeterInTimePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeseries_grpc.timeseriesHandler/GetTotalUsageForMeterInTimePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesHandlerServer).GetTotalUsageForMeterInTimePeriod(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeseriesHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timeseries_grpc.timeseriesHandler",
	HandlerType: (*TimeseriesHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _TimeseriesHandler_Store_Handler,
		},
		{
			MethodName: "GetAllFromTimeToTime",
			Handler:    _TimeseriesHandler_GetAllFromTimeToTime_Handler,
		},
		{
			MethodName: "GetTotalUsageForCustomerInTimePeriod",
			Handler:    _TimeseriesHandler_GetTotalUsageForCustomerInTimePeriod_Handler,
		},
		{
			MethodName: "GetTotalUsageForMeterInTimePeriod",
			Handler:    _TimeseriesHandler_GetTotalUsageForMeterInTimePeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Delivery/grpc/timeseries_grpc/timeSeries.proto",
}

func init() { proto.RegisterFile("Delivery/grpc/timeseries_grpc/timeSeries.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xed, 0x8a, 0xd3, 0x40,
	0x14, 0x6d, 0x92, 0xa6, 0xcb, 0xde, 0xc2, 0xaa, 0xc3, 0x22, 0xa1, 0x2e, 0xda, 0x1d, 0xfc, 0x51,
	0x04, 0xa7, 0x50, 0x9f, 0x40, 0xaa, 0x5b, 0x05, 0x17, 0x64, 0x5a, 0xfd, 0xab, 0xd9, 0xe6, 0x6e,
	0x0d, 0x24, 0xbd, 0x75, 0x66, 0xb2, 0xe0, 0x5f, 0xc1, 0x17, 0xf1, 0x1d, 0x7c, 0x3f, 0x99, 0xc9,
	0xa6, 0xe9, 0x66, 0x6b, 0xab, 0xe0, 0xfe, 0x29, 0xbd, 0x39, 0xe7, 0xdc, 0x8f, 0x73, 0x06, 0xc4,
	0x2b, 0xcc, 0xd2, 0x2b, 0x54, 0xdf, 0x86, 0x0b, 0xb5, 0x9a, 0x0f, 0x4d, 0x9a, 0xa3, 0x46, 0x95,
	0xa2, 0xfe, 0xb4, 0xae, 0xa7, 0xae, 0x16, 0x2b, 0x45, 0x86, 0xd8, 0xbd, 0x06, 0xa3, 0xf7, 0x64,
	0x41, 0xb4, 0xc8, 0x70, 0xe8, 0xe0, 0x8b, 0xe2, 0xb2, 0x6c, 0x61, 0xe2, 0x7c, 0x55, 0x2a, 0xf8,
	0x39, 0x84, 0x1f, 0xe3, 0xac, 0x40, 0x26, 0xa0, 0xfd, 0x85, 0x0a, 0x15, 0x79, 0x7d, 0x6f, 0xd0,
	0x1d, 0xf5, 0x44, 0x29, 0x14, 0x95, 0x50, 0xcc, 0x2a, 0xa1, 0x74, 0x3c, 0x76, 0x0c, 0xe1, 0x95,
	0x15, 0x46, 0x7e, 0xdf, 0x1b, 0x78, 0xb2, 0x2c, 0xf8, 0x77, 0x1f, 0x60, 0xb6, 0xde, 0x81, 0x1d,
	0x81, 0x9f, 0x26, 0xae, 0xe5, 0xa1, 0xf4, 0xd3, 0x84, 0x45, 0x70, 0x90, 0xa3, 0x41, 0xf5, 0x36,
	0x71, 0xb2, 0x43, 0x59, 0x95, 0xec, 0x31, 0xc0, 0xbc, 0xd0, 0x86, 0x72, 0x07, 0x06, 0x0e, 0xdc,
	0xf8, 0x62, 0x71, 0x85, 0x9a, 0xb2, 0xc2, 0xa4, 0xb4, 0x8c, 0xda, 0x25, 0x5e, 0x7f, 0xb1, 0xeb,
	0x5f, 0x2a, 0xca, 0xa3, 0x70, 0xff, 0xfa, 0x96, 0xc7, 0x9e, 0x81, 0x6f, 0x28, 0xea, 0xec, 0x65,
	0xfb, 0x86, 0x98, 0x80, 0x8e, 0xbb, 0x4e, 0x47, 0x07, 0xfd, 0x60, 0xd0, 0x1d, 0x3d, 0x14, 0x0d,
	0x9b, 0x85, 0xb3, 0x50, 0x5e, 0xb3, 0xf8, 0x4f, 0x0f, 0x60, 0x82, 0x46, 0xe2, 0xd7, 0x02, 0xb5,
	0x59, 0xaf, 0xe6, 0xfd, 0xd3, 0x6a, 0xfe, 0x5f, 0xad, 0xb6, 0xcf, 0xb6, 0x0d, 0xc3, 0xdb, 0x37,
	0x0c, 0xe7, 0x73, 0x38, 0x99, 0xa0, 0x79, 0x99, 0x65, 0x67, 0x8a, 0x72, 0xdb, 0x74, 0x46, 0xf6,
	0x57, 0xa2, 0x5e, 0xd1, 0x52, 0x23, 0x1b, 0xc3, 0x51, 0x1d, 0xe4, 0xbb, 0x54, 0x9b, 0xc8, 0x73,
	0xc7, 0x3f, 0xba, 0x75, 0x7c, 0x4d, 0x93, 0x0d, 0x09, 0xff, 0xe5, 0x41, 0x77, 0x5a, 0xe4, 0xeb,
	0xa6, 0xf7, 0x21, 0xd0, 0x45, 0xe9, 0x84, 0x27, 0xed, 0xdf, 0xc6, 0x01, 0xfe, 0xae, 0x03, 0x82,
	0x9b, 0x2f, 0xe6, 0x0e, 0x13, 0xe7, 0xa7, 0x10, 0xbe, 0x56, 0x8a, 0x54, 0x39, 0x5e, 0xeb, 0x78,
	0x81, 0xd7, 0xaf, 0xb8, 0x2a, 0x47, 0x3f, 0x02, 0x78, 0x50, 0x3b, 0xf1, 0x26, 0x5e, 0x26, 0x19,
	0x2a, 0x36, 0x86, 0x70, 0x6a, 0x48, 0x21, 0xdb, 0x65, 0x53, 0x6f, 0x17, 0xc8, 0x5b, 0x2c, 0x81,
	0xe3, 0x6d, 0xd1, 0x6c, 0xe9, 0x59, 0xbf, 0xb2, 0xde, 0xf3, 0x6d, 0xe0, 0x1f, 0xe3, 0xe5, 0x2d,
	0x36, 0x87, 0xa7, 0x13, 0x34, 0x33, 0x32, 0x71, 0xf6, 0xc1, 0x5e, 0x74, 0x46, 0x6a, 0x5c, 0xf9,
	0xbe, 0xb4, 0xdc, 0xf7, 0xa8, 0x52, 0x4a, 0x76, 0x4f, 0x3d, 0xb9, 0x05, 0x6e, 0xc4, 0xcd, 0x5b,
	0xec, 0x33, 0x9c, 0x36, 0x87, 0x9c, 0xbb, 0xfc, 0xfe, 0xd7, 0x84, 0x8b, 0x8e, 0x8b, 0xf0, 0xc5,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0xa4, 0xf1, 0x93, 0x2b, 0x05, 0x00, 0x00,
}
